@use 'sass:math';

// typography

@mixin font-ibm-plex-mono {
    font-family: 'IBM Plex Mono', sans-serif;
    font-weight: 400;
}

@mixin font-ibm-plex-mono-md {
    font-family: 'IBM Plex Mono', sans-serif;
    font-weight: 500;
}

@mixin font-ibm-plex-mono-semibold {
    font-family: 'IBM Plex Mono', sans-serif;
    font-weight: 600;
}

@mixin font-ibm-plex-mono-bold {
    font-family: 'IBM Plex Mono', sans-serif;
    font-weight: 700;
}

@mixin font-inter-md {
    font-family: 'Inter', sans-serif;
    font-weight: 500;
}

@mixin font-inter-semibold {
    font-family: 'Inter', sans-serif;
    font-weight: 600;
}

@mixin font-inter-bold {
    font-family: 'Inter', sans-serif;
    font-weight: 700;
}

@mixin font-inter-extrabold {
    font-family: 'Inter', sans-serif;
    font-weight: 800;
}

@function rem($val) {
    @return calc($val/$base-font-size) + rem;
}

@mixin font($font-size, $leading, $tracking: 0) {
    font-size: calc($font-size / $base-font-size) + rem;
    line-height: calc($leading / $base-font-size) + rem;
    @if $tracking != 0 {
        letter-spacing: $tracking + px;
    }
}

// visual
@function color($group, $color) {
    @return map-get(map-get($colors, $group), $color);
}

@mixin borderRadius($radius: 8) {
    border-radius: rem($radius);
}

@mixin border($color: color(common, 'black'), $radius: 8, $width: 1) {
    border: rem($width) solid $color;
    @include borderRadius($radius);
}

@mixin dashBorder {
    background-image: linear-gradient(
        to right,
        color(common, 'md-gray') 50%,
        rgba(255, 255, 255, 0) 0%
    );
    background-position: bottom;
    background-size: rem(16) 1px;
    background-repeat: repeat-x;
}

@mixin boxShadow($color: color(common, 'white')) {
    @include border;
    &:before {
        display: block;
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        top: rem(6);
        left: rem(6);
        z-index: -1;
        background-color: color(common, 'black');
        @include borderRadius(10);
    }
    &:after {
        display: block;
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: -1;
        background-color: $color;
        @include borderRadius;
    }
}

@mixin removeBoxShadow {
    border: unset;
    &:before,
    &:after {
        display: none;
    }
}

// spacing
@mixin paddingX($padding) {
    padding-left: rem($padding);
    padding-right: rem($padding);
}

@mixin paddingY($padding) {
    padding-top: rem($padding);
    padding-bottom: rem($padding);
}

@mixin marginX($margin) {
    @if $margin == 'auto' {
        margin-left: auto;
        margin-right: auto;
    } @else {
        margin-left: rem($margin);
        margin-right: rem($margin);
    }
}

@mixin marginY($margin) {
    @if $margin == 'auto' {
        margin-top: auto;
        margin-bottom: auto;
    } @else {
        margin-top: rem($margin);
        margin-bottom: rem($margin);
    }
}

// animation
@mixin transition($properties...) {
    $transition: ();
    @each $property in $properties {
        $transition: append($transition, ($property 0.25s ease-in-out), comma);
    }
    transition: $transition;
}

@mixin bgSlideHover($color1, $color2) {
    background: $color2;
    background: linear-gradient(to right, $color2 50%, $color1 50%);
    background-size: 200% 100%;
    background-position: 100% 0%;
    @include transition(background-position);

    @include hover {
        background-position: 0% 0%;
    }
}

@mixin underlineHighlightHover($padding: 4) {
    @include transition(color);
    position: relative;
    &:before {
        content: '';
        position: absolute;
        height: 0px;
        width: calc(100% + rem(8));
        left: rem(-$padding);
        background-color: color(common, 'primary');
        bottom: rem(-$padding);
        z-index: -1;
        @include transition(height);
    }
    .link-icon {
        position: relative;
    }
    .link-text {
        position: relative;
        &:before {
            display: block;
            content: '';
            position: absolute;
            width: 100%;
            height: rem(2);
            background-color: color(common, 'primary');
            left: 0;
            bottom: rem(-$padding);
            z-index: -1;
        }
    }
    @include hover {
        color: color(common, 'white');
        &:before {
            height: calc(100% + rem(5));
        }
    }
}

@mixin underlineOnHover($padding: 4) {
    .link-text {
        position: relative;
        &:before {
            display: none;
            content: '';
            position: absolute;
            width: 100%;
            height: rem(2);
            bottom: rem(-$padding);
            left: 0;
            z-index: -1;
            background: color(common, 'primary');
        }
    }
    @include hover {
        .link-text {
            &:before {
                display: block;
            }
        }
    }
}

@mixin hoverOpacity {
    @include hover {
        opacity: 0.8;
        @include transition(opacity);
    }
}

// accessibility
@mixin addTargetArea($amount: 14, $display: block) {
    display: $display;
    padding: rem($amount);
    margin: rem(-$amount);
}

@mixin hover {
    &:hover,
    &:focus-visible {
        @content;
    }
}

// media queries
@function breakpoint($size) {
    @return map-get($breakpoints, $size);
}

@mixin mobileLg {
    @media screen and (min-width: breakpoint('mobileLg')) {
        @content;
    }
}

@mixin tablet {
    @media screen and (min-width: breakpoint('tablet')) {
        @content;
    }
}

@mixin tabletLg {
    @media screen and (min-width: breakpoint('tabletLg')) {
        @content;
    }
}

@mixin laptop {
    @media screen and (min-width: breakpoint('laptop')) {
        @content;
    }
}

@mixin desktopSm {
    @media screen and (min-width: breakpoint('desktopSm')) {
        @content;
    }
}

@mixin desktop {
    @media screen and (min-width: breakpoint('desktop')) {
        @content;
    }
}
