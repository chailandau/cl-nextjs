@use 'sass:math';

// typography

@mixin font-ibm-plex-mono {
    font-family: 'IBM Plex Mono', sans-serif;
    font-weight: 400;
}

@mixin font-ibm-plex-mono-md {
    font-family: 'IBM Plex Mono', sans-serif;
    font-weight: 500;
}

@mixin font-ibm-plex-mono-semibold {
    font-family: 'IBM Plex Mono', sans-serif;
    font-weight: 600;
}

@mixin font-ibm-plex-mono-bold {
    font-family: 'IBM Plex Mono', sans-serif;
    font-weight: 700;
}

@mixin font-inter-md {
    font-family: 'Inter', sans-serif;
    font-weight: 500;
}

@mixin font-inter-semibold {
    font-family: 'Inter', sans-serif;
    font-weight: 600;
}

@mixin font-inter-bold {
    font-family: 'Inter', sans-serif;
    font-weight: 700;
}

@mixin font-inter-extrabold {
    font-family: 'Inter', sans-serif;
    font-weight: 800;
}

@function rem($val) {
    @return calc($val/$base-font-size) + rem;
}

@mixin font($font-size, $leading, $tracking: 0) {
    font-size: calc($font-size / $base-font-size) + rem;
    line-height: calc($leading / $base-font-size) + rem;
    @if $tracking != 0 {
        letter-spacing: $tracking + px;
    }
}

// visual
@function color($group, $color) {
    @return map-get(map-get($colors, $group), $color);
}

// spacing
@mixin paddingX($padding) {
    padding-left: rem($padding);
    padding-right: rem($padding);
}

@mixin paddingY($padding) {
    padding-top: rem($padding);
    padding-bottom: rem($padding);
}

@mixin marginX($margin) {
    @if $margin == 'auto' {
        margin-left: auto;
        margin-right: auto;
    } @else {
        margin-left: rem($margin);
        margin-right: rem($margin);
    }
}

@mixin marginY($margin) {
    @if $margin == 'auto' {
        margin-top: auto;
        margin-bottom: auto;
    } @else {
        margin-top: rem($margin);
        margin-bottom: rem($margin);
    }
}

// animation
@mixin transition($properties...) {
    $transition: ();
    @each $property in $properties {
        $transition: append($transition, ($property 0.25s ease-in-out), comma);
    }
    transition: $transition;
}

@mixin bgSlideHover($color1, $color2) {
    background: $color2;
    background: linear-gradient(to right, $color2 50%, $color1 50%);
    background-size: 200% 100%;
    background-position: 100% 0%;
    @include transition(background-position);

    @include hover {
        background-position: 0% 0%;
    }
}

@mixin expandUnderlineHover($padding: 4) {
    position: relative;
    @include transition(color);
    &:before {
        content: '';
        position: absolute;
        width: calc(100% + rem(30));
        height: calc(100% + rem($padding * 1.75));
        background-color: color(common, 'primary');
        left: rem(-$padding);
        bottom: rem(-$padding);
        transform-origin: left bottom;
        transform: scaleY(0);
        @include transition(transform);
        z-index: -1;
    }
    &:after {
        display: block;
        content: '>';
        position: absolute;
        width: auto;
        height: 100%;
        top: 0;
        right: rem(-18);
        z-index: -1;
    }
    @include hover {
        color: color(common, 'white');
        &:before {
            transform-origin: bottom;
            transform: scaleX(1);
        }
    }
}

// accessibility
@mixin addTargetArea($amount: 14) {
    display: block;
    padding: rem($amount);
    margin: rem(-$amount);
}

@mixin hover {
    &:hover,
    &:focus-visible {
        @content;
    }
}

// media queries
@function breakpoint($size) {
    @return map-get($breakpoints, $size);
}

@mixin mobile-lg {
    @media screen and (min-width: breakpoint('mobile-lg')) {
        @content;
    }
}

@mixin tablet {
    @media screen and (min-width: breakpoint('tablet')) {
        @content;
    }
}

@mixin tablet-lg {
    @media screen and (min-width: breakpoint('tablet-lg')) {
        @content;
    }
}

@mixin laptop {
    @media screen and (min-width: breakpoint('laptop')) {
        @content;
    }
}

@mixin desktop-sm {
    @media screen and (min-width: breakpoint('desktop-sm')) {
        @content;
    }
}

@mixin desktop {
    @media screen and (min-width: breakpoint('desktop')) {
        @content;
    }
}
